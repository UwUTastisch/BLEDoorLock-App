name: Flutter

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Set up job
        run: |
          TAG_NAME=$(date +'%Y%m%d%H%M%S')
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

      - name: Create Release (if ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache of dart pub get dependencies
          pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
          #flutter-version-file: pubspec.yaml # path to pubspec.yaml

      - run: flutter pub get

      - name: Build APK (if ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        run: |
          flutter build apk
          flutter build appbundle

      - name: Build iOS (if macos-latest)
        if: matrix.os == 'macos-latest'
        run: flutter build ios --release --no-codesign

      - name: Upload APK (if ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Upload iOS APP (if macos-latest)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: release-app
          path: build/ios/iphoneos/Runner.app

      - name: Publish APK (if ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Publish iOS APP (if macos-latest)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/ios/iphoneos/Runner.app
          asset_name: Runner.app
          asset_content_type: application/zip
